.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "HMCTL" "8" "Apr, 2024" "Hmctl User Manuals" ""
.hy
.SH NAME
.PP
hmctl - Control heterogeneous memory allocation policy
.SH SYNOPSIS
.PP
hmctl [\f[I]options\f[R]] COMMAND [\f[I]command-options\f[R]]
.SH DESCRIPTION
.PP
The \f[B]hmctl\f[R] tool is to control heterogeneous memory allocation
policy.
It changes memory policy only for the area allocated by \f[B]hmalloc
APIs\f[R], which is called as \f[B]hmalloc pool\f[R] then executes the
given \f[C]COMMAND\f[R] program.
The rest of memory regions other than \f[B]hmalloc pool\f[R] are not
affected by this tool.
.SH OPTIONS
.TP
-m \f[I]node\f[R], --membind=\f[I]node\f[R]
Allocate memory only from \f[I]node\f[R] for hmalloc family allocations.
.TP
-p \f[I]node\f[R], --preferred=\f[I]node\f[R]
Preferably allocate memory on \f[I]node\f[R] for hmalloc family
allocations.
.TP
-?, --help
Print help message and list of options with description
.TP
--usage
Print usage string
.SH EXAMPLES
.PP
Let\[cq]s say if the target test program allocates 512 MiB using
\f[B]hmalloc\f[R](3), then this memory area can be allocated to the
intended node as follows.
.IP
.nf
\f[C]
# Allocate hmalloc area to node 2 with MPOL_BIND policy.
$ hmctl -m 2 ./prog

# Allocate hmalloc area to node 1 with MPOL_PREFERRED policy.
$ hmctl -p 1 ./prog
\f[R]
.fi
.PP
If you want to use a different memory policy with global policy, then
hmctl can be used along with numactl as follows.
.IP
.nf
\f[C]
# Set global policy to MPOL_PREFERRED for node 1,
# but use MPOL_BIND for node 2 only to hmalloc area.
$ numactl -p 1 hmctl -m 2 ./prog

# Set global policy to MPOL_INTERLEAVE for node 1 and 2,
# but use MPOL_PREFERRED for node 3 only to hmalloc area.
$ numactl -i 1,2 hmctl -p 3 ./prog
\f[R]
.fi
.SH GLOSSARY
.SS HMALLOC APIS
.PP
The \f[B]hmalloc APIs\f[R] are heterogeneous memory allocation APIs
provided by \f[B]libhmalloc.so\f[R] such as \f[B]hmalloc\f[R](3),
\f[B]hcalloc\f[R](3), \f[B]hposix_memalign\f[R](3), \f[B]hmmap\f[R](3),
etc.
All the APIs defined in \f[B]hmalloc.h\f[R] are \f[B]hmalloc APIs\f[R].
.SS HMALLOC POOL
.PP
The \f[B]hmalloc pool\f[R] is specially managed memory areas that can be
optionally controlled by \f[B]hmctl\f[R](8) tool.
If target programs allocate memory using \f[B]hmalloc APIs\f[R], then
this area is mapped as \f[B]hmalloc pool\f[R].
This \f[B]hmalloc pool\f[R] has no effect if the target program runs
without \f[B]hmctl\f[R](8), but if it runs with \f[B]hmctl\f[R](8)
attached, then the memory policy of this area can be changed based on
the usage of \f[B]hmctl\f[R](8).
.SS HMCTL
.PP
The \f[B]hmctl\f[R](8) is a tool that controls heterogeneous memory
allocation policy.
That means it can change the memory policy of \f[B]hmalloc pool\f[R]
allocated by \f[B]hmalloc APIs\f[R] internally using \f[B]mmap\f[R](2)
and \f[B]mbind\f[R](2).
If \f[B]hmctl\f[R](8) is attached and
\f[B]-m\f[R]/\f[B]\[en]membind\f[R] or
\f[B]-p\f[R]/\f[B]\[en]preferred\f[R] option is given with a valid NUMA
node ID, then the \f[B]hmalloc pool\f[R] memory is allocated from the
target node with the given memory policy based on the usage of
\f[B]hmctl\f[R](8).
.SH SEE ALSO
.PP
\f[B]numactl\f[R](8), \f[B]hmalloc\f[R](3)
.SH AUTHORS
Honggyu Kim <honggyu.kim@sk.com>.
