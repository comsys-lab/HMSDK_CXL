.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "HMCTL" "8" "Apr, 2024" "Hmctl User Manuals" ""
.hy
.SH NAME
.PP
hmctl - Control heterogeneous memory allocation policy
.SH SYNOPSIS
.PP
hmctl [\f[I]options\f[R]] COMMAND [\f[I]command-options\f[R]]
.SH DESCRIPTION
.PP
The hmctl tool is to control heterogeneous memory allocation policy for
hmalloc family allocation APIs provided by libhmalloc.so library.
For simplicity, the hmalloc family allocation APIs will be called as
hmalloc APIs below.
.PP
The hmctl changes memory policy only for the area allocated by hmalloc
APIs then executes the given \f[C]COMMAND\f[R] program, which is linked
with libhmalloc.so at build time.
The rest of memory region other than hmalloc area is not affected by
this tool.
.SH OPTIONS
.TP
-m \f[I]node\f[R], --membind=\f[I]node\f[R]
Allocate memory only from \f[I]node\f[R] for hmalloc family allocations.
.TP
-p \f[I]node\f[R], --preferred=\f[I]node\f[R]
Preferably allocate memory on \f[I]node\f[R] for hmalloc family
allocations.
.TP
-?, --help
Print help message and list of options with description
.TP
--usage
Print usage string
.SH EXAMPLES
.PP
Let\[cq]s say if the target test program allocates 512 MiB using
hmalloc(), then this memory area can be allocated to the intended node
as follows.
.IP
.nf
\f[C]
# Allocate hmalloc area to node 2 with MPOL_BIND policy.
$ hmctl -m 2 ./prog

# Allocate hmalloc area to node 1 with MPOL_PREFERRED policy.
$ hmctl -p 1 ./prog
\f[R]
.fi
.PP
If you want to use a different memory policy with global policy, then
hmctl can be used along with numactl as follows.
.IP
.nf
\f[C]
# Set global policy to MPOL_PREFERRED for node 1,
# but use MPOL_BIND for node 2 only to hmalloc area.
$ numactl -p 1 hmctl -m 2 ./prog

# Set global policy to MPOL_INTERLEAVE for node 1 and 2,
# but use MPOL_PREFERRED for node 3 only to hmalloc area.
$ numactl -i 1,2 hmctl -p 3 ./prog
\f[R]
.fi
.SH SEE ALSO
.PP
\f[C]numactl\f[R](8)
.SH AUTHORS
Honggyu Kim <honggyu.kim@sk.com>.
