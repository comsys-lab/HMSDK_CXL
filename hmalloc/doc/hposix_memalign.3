.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "HPOSIX_MEMALIGN" "3" "Apr, 2024" "HMSDK Programmer\[cq]s Manuals" ""
.hy
.SH NAME
.PP
hposix_memalign, haligned_alloc - allocate aligned heterogeneous memory
.SH SYNOPSIS
.PP
\f[B]#include <hmalloc.h>\f[R]
.PP
\f[B]int hposix_memalign(void **\f[BI]memptr\f[B], size_t
\f[BI]alignment\f[B], size_t \f[BI]size\f[B]);\f[R]
.PD 0
.P
.PD
\f[B]void *haligned_alloc(size_t \f[BI]alignment\f[B], size_t
\f[BI]size\f[B]);\f[R]
.SH DESCRIPTION
.PP
The function \f[B]hposix_memalign\f[R]() allocates \f[I]size\f[R] bytes
and places the address of the allocated memory in \f[I]*memptr\f[R] from
\f[B]hmalloc pool\f[R] that can be optionally controlled by
\f[B]hmctl\f[R](8) tool.
.PP
The behaviors of \f[B]hposix_memalign\f[R] is same as
\f[B]posix_memalign\f[R](3) so the address of the allocated memory will
be a multiple of \f[I]alignment\f[R], which must be a power of two and a
multiple of \f[I]sizeof(void *)\f[R].
This address can later be successfully passed to \f[B]hfree\f[R](3).
Even if \f[I]size\f[R] is 0, then the value placed in \f[I]*memptr\f[R]
is a unique pointer value that should be deallocated by
\f[B]hfree\f[R](3).
.PP
The function \f[B]haligned_alloc\f[R]() works same as
\f[B]aligned_alloc\f[R](3) so the returned pointer will be a multiple of
\f[I]alignment\f[R], which must be a power of two.
This pointer should be deallocated by \f[B]hfree\f[R](3) later.
.SH GLOSSARY
.SS HMALLOC APIS
.PP
The \f[B]hmalloc APIs\f[R] are heterogeneous memory allocation APIs
provided by \f[B]libhmalloc.so\f[R] such as \f[B]hmalloc\f[R](3),
\f[B]hcalloc\f[R](3), \f[B]hposix_memalign\f[R](3), \f[B]hmmap\f[R](3),
etc.
All the APIs defined in \f[B]hmalloc.h\f[R] are \f[B]hmalloc APIs\f[R].
.SS HMALLOC POOL
.PP
The \f[B]hmalloc pool\f[R] is specially managed memory areas that can be
optionally controlled by \f[B]hmctl\f[R](8) tool.
If target programs allocate memory using \f[B]hmalloc APIs\f[R], then
this area is mapped as \f[B]hmalloc pool\f[R].
This \f[B]hmalloc pool\f[R] has no effect if the target program runs
without \f[B]hmctl\f[R](8), but if it runs with \f[B]hmctl\f[R](8)
attached, then the memory policy of this area can be changed based on
the usage of \f[B]hmctl\f[R](8).
.SS HMCTL
.PP
The \f[B]hmctl\f[R](8) is a tool that controls heterogeneous memory
allocation policy.
That means it can change the memory policy of \f[B]hmalloc pool\f[R]
allocated by \f[B]hmalloc APIs\f[R] internally using \f[B]mmap\f[R](2)
and \f[B]mbind\f[R](2).
If \f[B]hmctl\f[R](8) is attached and
\f[B]-m\f[R]/\f[B]\[en]membind\f[R] or
\f[B]-p\f[R]/\f[B]\[en]preferred\f[R] option is given with a valid NUMA
node ID, then the \f[B]hmalloc pool\f[R] memory is allocated from the
target node with the given memory policy based on the usage of
\f[B]hmctl\f[R](8).
.SH RETURN VALUE
.PP
\f[B]hposix_memalign\f[R]() returns zero on success, or one of the error
values listed in the \f[B]ERRORS\f[R] section on failure.
The value of \f[I]errno\f[R] is not set.
.PP
\f[B]haligned_alloc\f[R]() returns a pointer to the allocated memory on
success.
On error, NULL is returned, and \f[I]errno\f[R] is set to indicate the
cause of the error.
.SH ERRORS
.PP
\f[B]EINVAL\f[R] The \f[I]alignment\f[R] argument was not a power of
two, or was not a multiple of \f[I]sizeof(void *)\f[R].
.PP
\f[B]ENOMEM\f[R] There was insufficient memory to fulfill the allocation
request from \f[B]hmalloc pool\f[R].
.SH SEE ALSO
.PP
\f[B]hmctl\f[R](8), \f[B]hfree\f[R](3), \f[B]posix_memalign\f[R](3),
\f[B]aligned_alloc\f[R](3)
.SH AUTHORS
Honggyu Kim <honggyu.kim@sk.com>, Yunjeong Mun <yunjeong.mun@sk.com>.
